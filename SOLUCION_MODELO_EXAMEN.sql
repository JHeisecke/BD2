-- TEMA 1  DESARROLLADO POR EL GRUPO DE ALDO ALIENDE
CREATE TABLE PRESTAMOS_CONCEDIDOS
(
ID NUMBER(8) CONSTRAINT PK_ID PRIMARY KEY,
FECHA_PRESTAMO DATE ,
MONTO_PRESTAMO NUMBER(12) NOT NULL,
CEDULA NUMBER(11) NOT NULL,
PLAZO NUMBER(2)NOT NULL,
ESTADO_PRESTAMO VARCHAR2(1),
CONSTRAINT FK_CI FOREIGN KEY (CEDULA)
REFERENCES B_EMPLEADOS(CEDULA)
);

  
CREATE TABLE CUOTAS_PRESTAMO(
ID NUMBER(8) ,
NRO_CUOTA NUMBER (2),
FECHA_VENCIMIENTO DATE,
IMPORTE_CUOTA NUMBER(8),
IMPORTE_CAPITAL NUMBER(8),
FECHA_PAGO DATE,
CONSTRAINT FK_ID FOREIGN KEY (ID)
REFERENCES PRESTAMOS_CONCEDIDOS(ID),
CONSTRAINT PK_CP PRIMARY KEY(ID,NRO_CUOTA)
);

CREATE TABLE DEPENDIENTES(
CEDULA  NUMBER(11),
NOMBRE VARCHAR2(30),
APELLIDO VARCHAR2(30),
FECHA_NACIMIENTO DATE,
CEDULA_DEPENDIENTE NUMBER(11) NOT NULL,
VINCULO VARCHAR2(1)NOT NULL,
CONSTRAINT FK_CEDULA FOREIGN KEY (CEDULA_DEPENDIENTE)
REFERENCES B_EMPLEADOS(CEDULA),
CONSTRAINT PK_CI PRIMARY KEY(CEDULA) 
);
ALTER TABLE PRESTAMOS_CONCEDIDOS
ADD CONSTRAINT CK_PLAZO CHECK (PLAZO IN ( 2, 6, 12, 36, 48 ,60 ))  ;

ALTER TABLE PRESTAMOS_CONCEDIDOS
ADD CONSTRAINT CK_ESTADO CHECK (ESTADO_PRESTAMO IN ('P','C' ))  ;

ALTER TABLE CUOTAS_PRESTAMO
ADD CONSTRAINT CK_NUMERO_CUOTA CHECK (NRO_CUOTA BETWEEN 1 AND 60 )  ;

ALTER TABLE CUOTAS_PRESTAMO
ADD CONSTRAINT CK_FECHA_PAGO CHECK (FECHA_PAGO IS NULL OR
          (FECHA_PAGO IS NOT NULL AND FECHA_PAGO >= FECHA_VENCIMIENTO) );
		  
---TEMA 2 DESARROLLADO POR EL GRUPO DE EMIGDIO FRANCO

CREATE PROFILE EMPLEADO 
LIMIT SESSIONS_PER_USER 3
IDLE_TIME 60 --ESTE ES EL PARAMETRO PARA CONFIGURAR EL TIEMPO DE INACTIVIDAD
--CONNECT_TIME 60
FAILED_LOGIN_ATTEMPTS 3
PASSWORD_LIFE_TIME 60
PASSWORD_GRACE_TIME 2
;

CREATE USER USUARIO01 IDENTIFIED BY USUARIO01 PROFILE EMPLEADO;		  
---TEMA 3  DESARROLLADO POR EL GRUPO DE EDUARDO LEGUIZAMON
CREATE MATERIALIZED VIEW V_LIQUIDACION
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND AS
SELECT E.CEDULA,
       ASIG.ASIGNACION,
       NVL(BONI.CANT_HIJ, 0) * 80000 BONIF_HIJOS,
       TRUNC(TRUNC(MONTHS_BETWEEN(SYSDATE, E.FECHA_ING) / 12) / 10)*100000 AS BONIF_ANTIGUEDAD,
       NVL(DEU.DEUDAS, 0) DEUDAS --AGREGUE NVL A LA CANTIDAD DE HIJOS Y LAS DEUDAS; PARA QUE MUESTREN '0' EN CASO DE QUE NO TENGA HIJOS<17  Y DEUDAS PENDIENTES
  FROM B_EMPLEADOS E
  JOIN (SELECT PA.CEDULA CEDULA, CS.ASIGNACION ASIGNACION
          FROM B_POSICION_ACTUAL PA
          JOIN B_CATEGORIAS_SALARIALES CS
            ON PA.COD_CATEGORIA = CS.COD_CATEGORIA
         WHERE CS.FECHA_FIN IS NULL
           AND PA.FECHA_FIN IS NULL) ASIG --PODEMOS HACERLO EN EL QUERY PRINCIPAL, NO ES NECESARIO EN UN SUBQUERY; PERO IGUAL ESTÁ BIEN
    ON E.CEDULA = ASIG.CEDULA
  LEFT JOIN (SELECT D.CEDULA_DEPENDIENTE CEDULA_DEPENDIENTE,
                    COUNT(D.CEDULA) CANT_HIJ
               FROM B_EMPLEADOS E
               LEFT JOIN DEPENDIENTES D
                 ON E.CEDULA = D.CEDULA_DEPENDIENTE
              WHERE VINCULO = 'H'
                AND TRUNC(MONTHS_BETWEEN(SYSDATE, D.FECHA_NACIMIENTO) / 12) < 18
              GROUP BY D.CEDULA_DEPENDIENTE) BONI
    ON E.CEDULA = BONI.CEDULA_DEPENDIENTE
  LEFT JOIN (SELECT PC.CEDULA CEDULA,
                    SUM(CP.IMPORTE_CUOTA + CP.IMPORTE_CAPITAL) DEUDAS
               FROM PRESTAMOS_CONCEDIDOS PC
               JOIN CUOTAS_PRESTAMO CP
                 ON PC.ID = CP.ID
              WHERE PC.ESTADO_PRESTAMO = 'P'
                AND CP.FECHA_PAGO IS NULL
              GROUP BY PC.CEDULA) DEU
    ON E.CEDULA = DEU.CEDULA;
--TEMA 4 DESARROLLADO POR DOS GRUPOS

DECLARE

V_MONTO_PRESTAMO NUMBER(30);
V_CEDULA B_EMPLEADOS.CEDULA%TYPE;
V_ASIGNACION B_CATEGORIAS_SALARIALES.ASIGNACION%TYPE;
V_ID_PRESTAMO PRESTAMOS_CONCEDIDOS.ID%TYPE; --USAR %TYPE NO NUMBER(3)

BEGIN

  V_MONTO_PRESTAMO :=&MONTO_PRESTAMO;
  V_CEDULA :=&CEDULA;
  
  SELECT CA.ASIGNACION 
    INTO V_ASIGNACION
    FROM B_EMPLEADOS EM 
    JOIN B_POSICION_ACTUAL PA 
      ON EM.CEDULA = PA.CEDULA
    JOIN B_CATEGORIAS_SALARIALES CA 
      ON CA.COD_CATEGORIA = PA.COD_CATEGORIA
    WHERE PA.FECHA_FIN IS NULL
    AND CA.FECHA_FIN IS NULL
    AND EM.CEDULA = V_CEDULA;
  
  IF V_MONTO_PRESTAMO < (10 * V_ASIGNACION) THEN  --PONER ENTRE () EL CÁLCULO
    SELECT NVL(MAX(ID),0)+1 
    INTO V_ID_PRESTAMO 
    FROM PRESTAMOS_CONCEDIDOS;
    
    INSERT INTO PRESTAMOS_CONCEDIDOS (ID, FECHA_PRESTAMO, MONTO_PRESTAMO, CEDULA, PLAZO, ESTADO_PRESTAMO)
    VALUES (V_ID_PRESTAMO, SYSDATE, V_MONTO_PRESTAMO, V_CEDULA, 12, 'P');
    
    FOR i IN 1..12 LOOP  
      INSERT INTO CUOTAS_PRESTAMO (ID, NRO_CUOTA, FECHA_VENCIMIENTO, IMPORTE_CUOTA, IMPORTE_CAPITAL)
      VALUES (V_ID_PRESTAMO, i , ADD_MONTHS(SYSDATE, i), V_MONTO_PRESTAMO/12, (V_MONTO_PRESTAMO*(3/12/100))); --HAY QUE DIVIDIR LA TASA DE INTERES ENTRE 100
    END LOOP;
    COMMIT; --SIEMPRE HAY QUE CONFIRMAR LA OPERACION
  END IF;  
EXCEPTION --AGERGUE ESTE BLOQUE; EN CASO DE QUE EL EMPLEADO INGRESADO POR TECLADO NO EXISTA; ATRAPEMOS LA EXCEPCIÓN  Y EMITAMOS UN MENSAJE AVISANDO LO OCURRIDO
     WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No existe el empleados con CI '||V_CEDULA);
END;